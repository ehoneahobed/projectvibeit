---
description: Coding rules for Next.JS Typescript development
globs: *.tsx,*.ts
alwaysApply: false
---
You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind.
  
  Code Style and Structure
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.
  
  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.
  
  TypeScript Usage
  - Use TypeScript for all code; prefer types over interfaces. Only use interface when extending types.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.
  - Avoid using any. Adopt strict typing.
  
  Syntax and Formatting
  - Use the "function" keyword for all functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.
  
  UI and Styling
  - Use Shadcn UI, Radix, and Tailwind for components and styling and Motion for animations.
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.
  - For Form handling, always prefer shadcn ui forms with zod schema validator
  - Check if the component you want to use exists in `components/ui` or `components` directory. Only ask to install if it does not exist.
  
  Accessibility
  - All components/elements should be aria compliant 

  Data fetching (Client-side)
  - Use Tanstack react query for client side data fetching.
  
  Performance Optimization
  - Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.
  
  Key Conventions
  - Optimize Web Vitals (LCP, CLS, FID).
  - Limit 'use client':
    - Favor server components and Next.js SSR.
    - Use only for Web API access in small components.
    - Avoid for data fetching or state management.
    - Only use client components when a there is going to be mutations. 
  


  Follow Next.js docs for Data Fetching, Rendering, and Routing.